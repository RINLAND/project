<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="register">


	<insert id="setRegisterOne" parameterType="com.setup.test2.Model.EmpVO">
		<!--default 들어가 있는건 신경 x -->

		<selectKey keyProperty="ref" order="BEFORE" resultType="int">

			<!--만약 null이면 키 값 중에 가장 큰 값을 구해서 ref에 붙여 쓰겠다는 것 -->
			SELECT IFNULL(max(emp_id)+1, 1) FROM grp_employee

		</selectKey>

		INSERT INTO grp_employee SET
		emp_team = #{empTeamCode},
		emp_grade = #{empGradeCode},
		emp_num = CONCAT(#{empNum}, #{ref}),
		emp_enter = #{empEnter},
		emp_name = #{empName},
		emp_pwd = #{empPwd},
		emp_enter	= #{empEnter},
		emp_date = now(),
		emp_photo	= #{empPhoto}

	</insert>
	
	<insert id = "setRegisterOthersOne" parameterType="com.setup.test2.Model.EmpVO">
		INSERT INTO grp_emp_others SET 
			emp_gender 		= #{empGender},
			emp_birth 		= #{empBirth}, 
			emp_cp 			= #{empCP}, 
			emp_in 			= #{empIn}, 
			emp_tel 		= #{empTel}, 
			emp_recruit 	= #{empRecruit}, 
			emp_unique	 	= #{empUnique}, 
			emp_uniquedetail= #{empUniqueDetail}, 
			emp_military	= #{empMilitary}, 
			emp_hobby		= #{empHobby}, 
			emp_disability	= #{empDisability}, 
			emp_reward		= #{empReward}, 
			emp_married		= #{empMarried},
			emp_level		= #{empLevel},
			emp_school		= #{empSchool},
			emp_major		= #{empMajor},
			emp_email		= #{empEmail},
			emp_address		= #{empAddress},
			emp_license1	= #{empLicense1}, 
			emp_license2	= #{empLicense2}, 
			emp_license3	= #{empLicense3},
			emp_lang1		= #{empLang1}, 
			emp_lang2		= #{empLang2},
			emp_award1		= #{empAward1},
			emp_award2		= #{empAward2},
			emp_award3		= #{empAward3},
			emp_award4		= #{empAward4},
			emp_award5		= #{empAward5},
			emp_num			= #{empNum}.
			emp_comment		= #{empComment}
	</insert>
	
	
	<select id="getEmpNumCheck" parameterType="hashmap" resultType="int">
		SELECT COUNT(emp_id) FROM grp_employee WHERE emp_num = #{empNum} AND emp_pwd = #{empPwd}
	</select>

	<update id="setEmployeeAuthChange" parameterType="hashmap">
		UPDATE
		grp_employee SET emp_confirm = #{empAuth} WHERE emp_num = #{empNum}
	</update>

	<select id="getEmpInfo" parameterType="hashmap" resultType="com.setup.test2.Model.EmpVO">
		SELECT
		emp_num AS empNum,
		emp_name AS empName,
		emp_auth AS empAuth,
		emp_confirm AS empConfirm,
		emp_team AS empTeamCode,
		emp_grade AS empGradeCode,
		team_name AS empTeamName,
		grade_name AS empGradeName FROM
		grp_employee LEFT JOIN grp_team ON emp_team = team_id
		LEFT JOIN
		grp_grade ON emp_grade = grade_id
		WHERE emp_num = #{empNum} AND
		emp_pwd
		= #{empPwd}
	</select>

	<select id="getGradeList" resultType="com.setup.test2.Model.GradeVO">
		SELECT grade_id, grade_name FROM grp_grade
	</select>

	<select id="getTeamList" resultType="com.setup.test2.Model.TeamVO">
		SELECT * FROM grp_team ORDER BY team_id
	</select>




</mapper>